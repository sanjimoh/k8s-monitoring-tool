// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PodStatus A pod
//
// swagger:model PodStatus
type PodStatus struct {

	// Details about why the pod is in this condition.
	// Required: true
	Description *string `json:"description"`

	// IP address of the host to which the pod is assigned
	// Required: true
	HostIP *string `json:"hostIp"`

	// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle (Pending, Running, Failed, Unknown)
	// Required: true
	Phase *string `json:"phase"`

	// IP address allocated to the pod
	// Required: true
	PodIP *string `json:"podIp"`
}

// Validate validates this pod status
func (m *PodStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePodIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PodStatus) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *PodStatus) validateHostIP(formats strfmt.Registry) error {

	if err := validate.Required("hostIp", "body", m.HostIP); err != nil {
		return err
	}

	return nil
}

func (m *PodStatus) validatePhase(formats strfmt.Registry) error {

	if err := validate.Required("phase", "body", m.Phase); err != nil {
		return err
	}

	return nil
}

func (m *PodStatus) validatePodIP(formats strfmt.Registry) error {

	if err := validate.Required("podIp", "body", m.PodIP); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PodStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PodStatus) UnmarshalBinary(b []byte) error {
	var res PodStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
