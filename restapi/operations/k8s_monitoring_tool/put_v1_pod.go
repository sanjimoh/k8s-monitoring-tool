// Code generated by go-swagger; DO NOT EDIT.

package k8s_monitoring_tool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PutV1PodHandlerFunc turns a function with the right signature into a put v1 pod handler
type PutV1PodHandlerFunc func(PutV1PodParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutV1PodHandlerFunc) Handle(params PutV1PodParams) middleware.Responder {
	return fn(params)
}

// PutV1PodHandler interface for that can handle valid put v1 pod params
type PutV1PodHandler interface {
	Handle(PutV1PodParams) middleware.Responder
}

// NewPutV1Pod creates a new http.Handler for the put v1 pod operation
func NewPutV1Pod(ctx *middleware.Context, handler PutV1PodHandler) *PutV1Pod {
	return &PutV1Pod{Context: ctx, Handler: handler}
}

/*PutV1Pod swagger:route PUT /v1/pod k8s-monitoring-tool putV1Pod

Update a pod configuration running in the k8s cluster

For example:
```
PUT /api/kmt/v1/pod
```

Sample request body will be:

```
{
  "name": "apache-cassandra",
  "replicas": "5",
  "image": "ccas-apache:2.5"
}
```


*/
type PutV1Pod struct {
	Context *middleware.Context
	Handler PutV1PodHandler
}

func (o *PutV1Pod) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPutV1PodParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
