// Code generated by go-swagger; DO NOT EDIT.

package k8s_monitoring_tool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"k8s-monitoring-tool/models"
)

// PutV1alpha1PodsOKCode is the HTTP code returned for type PutV1alpha1PodsOK
const PutV1alpha1PodsOKCode int = 200

/*PutV1alpha1PodsOK Pod deployment updated successfully.

swagger:response putV1alpha1PodsOK
*/
type PutV1alpha1PodsOK struct {

	/*
	  In: Body
	*/
	Payload *models.PodDeployment `json:"body,omitempty"`
}

// NewPutV1alpha1PodsOK creates PutV1alpha1PodsOK with default headers values
func NewPutV1alpha1PodsOK() *PutV1alpha1PodsOK {

	return &PutV1alpha1PodsOK{}
}

// WithPayload adds the payload to the put v1alpha1 pods o k response
func (o *PutV1alpha1PodsOK) WithPayload(payload *models.PodDeployment) *PutV1alpha1PodsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put v1alpha1 pods o k response
func (o *PutV1alpha1PodsOK) SetPayload(payload *models.PodDeployment) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutV1alpha1PodsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutV1alpha1PodsBadRequestCode is the HTTP code returned for type PutV1alpha1PodsBadRequest
const PutV1alpha1PodsBadRequestCode int = 400

/*PutV1alpha1PodsBadRequest Bad Request, Unable to update pod deployment.

swagger:response putV1alpha1PodsBadRequest
*/
type PutV1alpha1PodsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutV1alpha1PodsBadRequest creates PutV1alpha1PodsBadRequest with default headers values
func NewPutV1alpha1PodsBadRequest() *PutV1alpha1PodsBadRequest {

	return &PutV1alpha1PodsBadRequest{}
}

// WithPayload adds the payload to the put v1alpha1 pods bad request response
func (o *PutV1alpha1PodsBadRequest) WithPayload(payload *models.Error) *PutV1alpha1PodsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put v1alpha1 pods bad request response
func (o *PutV1alpha1PodsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutV1alpha1PodsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutV1alpha1PodsInternalServerErrorCode is the HTTP code returned for type PutV1alpha1PodsInternalServerError
const PutV1alpha1PodsInternalServerErrorCode int = 500

/*PutV1alpha1PodsInternalServerError Internal server error.

swagger:response putV1alpha1PodsInternalServerError
*/
type PutV1alpha1PodsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPutV1alpha1PodsInternalServerError creates PutV1alpha1PodsInternalServerError with default headers values
func NewPutV1alpha1PodsInternalServerError() *PutV1alpha1PodsInternalServerError {

	return &PutV1alpha1PodsInternalServerError{}
}

// WithPayload adds the payload to the put v1alpha1 pods internal server error response
func (o *PutV1alpha1PodsInternalServerError) WithPayload(payload *models.Error) *PutV1alpha1PodsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put v1alpha1 pods internal server error response
func (o *PutV1alpha1PodsInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutV1alpha1PodsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
