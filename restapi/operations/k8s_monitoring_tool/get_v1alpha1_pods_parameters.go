// Code generated by go-swagger; DO NOT EDIT.

package k8s_monitoring_tool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewGetV1alpha1PodsParams creates a new GetV1alpha1PodsParams object
//
// There are no default values defined in the spec.
func NewGetV1alpha1PodsParams() GetV1alpha1PodsParams {

	return GetV1alpha1PodsParams{}
}

// GetV1alpha1PodsParams contains all the bound params for the get v1alpha1 pods operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetV1alpha1Pods
type GetV1alpha1PodsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Pass if you wish to fetch pods which are breaching the given cpuThreshold.
	  In: query
	*/
	CPUThreshold *string
	/*Pass byte value as string. Pass if you wish to fetch pods which are breaching the given memoryThreshold.
	  In: query
	*/
	MemoryThreshold *string
	/*Pass if pods status for a specific namespace is desired; otherwise all pods across all namespaces are returned.
	  In: query
	*/
	Namespace *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetV1alpha1PodsParams() beforehand.
func (o *GetV1alpha1PodsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCPUThreshold, qhkCPUThreshold, _ := qs.GetOK("cpuThreshold")
	if err := o.bindCPUThreshold(qCPUThreshold, qhkCPUThreshold, route.Formats); err != nil {
		res = append(res, err)
	}

	qMemoryThreshold, qhkMemoryThreshold, _ := qs.GetOK("memoryThreshold")
	if err := o.bindMemoryThreshold(qMemoryThreshold, qhkMemoryThreshold, route.Formats); err != nil {
		res = append(res, err)
	}

	qNamespace, qhkNamespace, _ := qs.GetOK("namespace")
	if err := o.bindNamespace(qNamespace, qhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCPUThreshold binds and validates parameter CPUThreshold from query.
func (o *GetV1alpha1PodsParams) bindCPUThreshold(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.CPUThreshold = &raw

	return nil
}

// bindMemoryThreshold binds and validates parameter MemoryThreshold from query.
func (o *GetV1alpha1PodsParams) bindMemoryThreshold(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.MemoryThreshold = &raw

	return nil
}

// bindNamespace binds and validates parameter Namespace from query.
func (o *GetV1alpha1PodsParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Namespace = &raw

	return nil
}
