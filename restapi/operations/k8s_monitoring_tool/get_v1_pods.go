// Code generated by go-swagger; DO NOT EDIT.

package k8s_monitoring_tool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetV1PodsHandlerFunc turns a function with the right signature into a get v1 pods handler
type GetV1PodsHandlerFunc func(GetV1PodsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1PodsHandlerFunc) Handle(params GetV1PodsParams) middleware.Responder {
	return fn(params)
}

// GetV1PodsHandler interface for that can handle valid get v1 pods params
type GetV1PodsHandler interface {
	Handle(GetV1PodsParams) middleware.Responder
}

// NewGetV1Pods creates a new http.Handler for the get v1 pods operation
func NewGetV1Pods(ctx *middleware.Context, handler GetV1PodsHandler) *GetV1Pods {
	return &GetV1Pods{Context: ctx, Handler: handler}
}

/*GetV1Pods swagger:route GET /v1/pods k8s-monitoring-tool getV1Pods

Gets all pods statistics running in the k8s cluster

For example:
```
GET /api/kmt/v1/pods
GET /api/kmt/v1/pods?namespace=databricks
```

Returns list of pods with their status:
```
[
  {
      "name": "pod-1",
      "status": "running",
      "nodeId": "node01"
  },
  {
      "name": "pod-2",
      "status": "CrashLoopBackOff",
      "nodeId": "node02"
  },
  ...
  ...
]
```


*/
type GetV1Pods struct {
	Context *middleware.Context
	Handler GetV1PodsHandler
}

func (o *GetV1Pods) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1PodsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
