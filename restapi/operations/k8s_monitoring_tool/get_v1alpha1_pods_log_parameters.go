// Code generated by go-swagger; DO NOT EDIT.

package k8s_monitoring_tool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetV1alpha1PodsLogParams creates a new GetV1alpha1PodsLogParams object
//
// There are no default values defined in the spec.
func NewGetV1alpha1PodsLogParams() GetV1alpha1PodsLogParams {

	return GetV1alpha1PodsLogParams{}
}

// GetV1alpha1PodsLogParams contains all the bound params for the get v1alpha1 pods log operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetV1alpha1PodsLog
type GetV1alpha1PodsLogParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Name of the container in the pod.
	  Required: true
	  In: query
	*/
	ContainerName string
	/*Namespace wherein pod resides.
	  Required: true
	  In: query
	*/
	Namespace string
	/*Name of the pod.
	  Required: true
	  In: query
	*/
	PodName string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetV1alpha1PodsLogParams() beforehand.
func (o *GetV1alpha1PodsLogParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qContainerName, qhkContainerName, _ := qs.GetOK("containerName")
	if err := o.bindContainerName(qContainerName, qhkContainerName, route.Formats); err != nil {
		res = append(res, err)
	}

	qNamespace, qhkNamespace, _ := qs.GetOK("namespace")
	if err := o.bindNamespace(qNamespace, qhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	qPodName, qhkPodName, _ := qs.GetOK("podName")
	if err := o.bindPodName(qPodName, qhkPodName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindContainerName binds and validates parameter ContainerName from query.
func (o *GetV1alpha1PodsLogParams) bindContainerName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("containerName", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("containerName", "query", raw); err != nil {
		return err
	}
	o.ContainerName = raw

	return nil
}

// bindNamespace binds and validates parameter Namespace from query.
func (o *GetV1alpha1PodsLogParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("namespace", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("namespace", "query", raw); err != nil {
		return err
	}
	o.Namespace = raw

	return nil
}

// bindPodName binds and validates parameter PodName from query.
func (o *GetV1alpha1PodsLogParams) bindPodName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("podName", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("podName", "query", raw); err != nil {
		return err
	}
	o.PodName = raw

	return nil
}
